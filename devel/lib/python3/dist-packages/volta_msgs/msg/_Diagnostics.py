# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from volta_msgs/Diagnostics.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Diagnostics(genpy.Message):
  _md5sum = "724ceb6ccb5d72d3af9209169201c96c"
  _type = "volta_msgs/Diagnostics"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """bool LOWBATTERY_FLAG
bool CHARGING_FLAG
bool MOTOR_ALARM_FLAG
bool BMS_ALARM_FLAG
bool HIGH_TEMP_FLAG
bool COMM_ERROR_FLAG

uint16 BMS_SOC
uint16 BMS_SOH
uint16 BMS_Voltage
int16 BMS_Current
uint16 BMS_voltageDiff
uint16 BMS_tempDiff
uint16 BMS_BCUMode
uint16 BMS_Alarm

uint16[2] M_State
uint16[2] M_Alarm
uint16[2] M_Power
uint16[2] M_Voltage
uint16[2] M_Current
uint8[2] M_Comm

float32 Relay_Temp
float32 PowerConn_Temp
float32 PreCharge_Temp
float32 Power_Supply_Temp


float32 Battery_In_Volt
float32 PRE_CHARGE_Volt
float32 HW_ESTOP_Volt
float32 SW_ESTOP_Volt

uint16[2] Motor_Alarm_Code
uint32[2] Motor_Fun_Fail

uint16[2] M_INIT
uint16[2] M_CW
uint16[2] M_CCW
uint16[2] M_STOP
uint16[2] M_BREAK
uint16[2] M_SETRPM
uint16[2] M_GETRPM
uint16[2] M_PARAM
uint16[2] M_ALARM

uint8 PRECHARGE_FUSE
uint8 MOTOR_FUSE
uint8 LED_STATE
"""
  __slots__ = ['LOWBATTERY_FLAG','CHARGING_FLAG','MOTOR_ALARM_FLAG','BMS_ALARM_FLAG','HIGH_TEMP_FLAG','COMM_ERROR_FLAG','BMS_SOC','BMS_SOH','BMS_Voltage','BMS_Current','BMS_voltageDiff','BMS_tempDiff','BMS_BCUMode','BMS_Alarm','M_State','M_Alarm','M_Power','M_Voltage','M_Current','M_Comm','Relay_Temp','PowerConn_Temp','PreCharge_Temp','Power_Supply_Temp','Battery_In_Volt','PRE_CHARGE_Volt','HW_ESTOP_Volt','SW_ESTOP_Volt','Motor_Alarm_Code','Motor_Fun_Fail','M_INIT','M_CW','M_CCW','M_STOP','M_BREAK','M_SETRPM','M_GETRPM','M_PARAM','M_ALARM','PRECHARGE_FUSE','MOTOR_FUSE','LED_STATE']
  _slot_types = ['bool','bool','bool','bool','bool','bool','uint16','uint16','uint16','int16','uint16','uint16','uint16','uint16','uint16[2]','uint16[2]','uint16[2]','uint16[2]','uint16[2]','uint8[2]','float32','float32','float32','float32','float32','float32','float32','float32','uint16[2]','uint32[2]','uint16[2]','uint16[2]','uint16[2]','uint16[2]','uint16[2]','uint16[2]','uint16[2]','uint16[2]','uint16[2]','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       LOWBATTERY_FLAG,CHARGING_FLAG,MOTOR_ALARM_FLAG,BMS_ALARM_FLAG,HIGH_TEMP_FLAG,COMM_ERROR_FLAG,BMS_SOC,BMS_SOH,BMS_Voltage,BMS_Current,BMS_voltageDiff,BMS_tempDiff,BMS_BCUMode,BMS_Alarm,M_State,M_Alarm,M_Power,M_Voltage,M_Current,M_Comm,Relay_Temp,PowerConn_Temp,PreCharge_Temp,Power_Supply_Temp,Battery_In_Volt,PRE_CHARGE_Volt,HW_ESTOP_Volt,SW_ESTOP_Volt,Motor_Alarm_Code,Motor_Fun_Fail,M_INIT,M_CW,M_CCW,M_STOP,M_BREAK,M_SETRPM,M_GETRPM,M_PARAM,M_ALARM,PRECHARGE_FUSE,MOTOR_FUSE,LED_STATE

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Diagnostics, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.LOWBATTERY_FLAG is None:
        self.LOWBATTERY_FLAG = False
      if self.CHARGING_FLAG is None:
        self.CHARGING_FLAG = False
      if self.MOTOR_ALARM_FLAG is None:
        self.MOTOR_ALARM_FLAG = False
      if self.BMS_ALARM_FLAG is None:
        self.BMS_ALARM_FLAG = False
      if self.HIGH_TEMP_FLAG is None:
        self.HIGH_TEMP_FLAG = False
      if self.COMM_ERROR_FLAG is None:
        self.COMM_ERROR_FLAG = False
      if self.BMS_SOC is None:
        self.BMS_SOC = 0
      if self.BMS_SOH is None:
        self.BMS_SOH = 0
      if self.BMS_Voltage is None:
        self.BMS_Voltage = 0
      if self.BMS_Current is None:
        self.BMS_Current = 0
      if self.BMS_voltageDiff is None:
        self.BMS_voltageDiff = 0
      if self.BMS_tempDiff is None:
        self.BMS_tempDiff = 0
      if self.BMS_BCUMode is None:
        self.BMS_BCUMode = 0
      if self.BMS_Alarm is None:
        self.BMS_Alarm = 0
      if self.M_State is None:
        self.M_State = [0] * 2
      if self.M_Alarm is None:
        self.M_Alarm = [0] * 2
      if self.M_Power is None:
        self.M_Power = [0] * 2
      if self.M_Voltage is None:
        self.M_Voltage = [0] * 2
      if self.M_Current is None:
        self.M_Current = [0] * 2
      if self.M_Comm is None:
        self.M_Comm = b'\0'*2
      if self.Relay_Temp is None:
        self.Relay_Temp = 0.
      if self.PowerConn_Temp is None:
        self.PowerConn_Temp = 0.
      if self.PreCharge_Temp is None:
        self.PreCharge_Temp = 0.
      if self.Power_Supply_Temp is None:
        self.Power_Supply_Temp = 0.
      if self.Battery_In_Volt is None:
        self.Battery_In_Volt = 0.
      if self.PRE_CHARGE_Volt is None:
        self.PRE_CHARGE_Volt = 0.
      if self.HW_ESTOP_Volt is None:
        self.HW_ESTOP_Volt = 0.
      if self.SW_ESTOP_Volt is None:
        self.SW_ESTOP_Volt = 0.
      if self.Motor_Alarm_Code is None:
        self.Motor_Alarm_Code = [0] * 2
      if self.Motor_Fun_Fail is None:
        self.Motor_Fun_Fail = [0] * 2
      if self.M_INIT is None:
        self.M_INIT = [0] * 2
      if self.M_CW is None:
        self.M_CW = [0] * 2
      if self.M_CCW is None:
        self.M_CCW = [0] * 2
      if self.M_STOP is None:
        self.M_STOP = [0] * 2
      if self.M_BREAK is None:
        self.M_BREAK = [0] * 2
      if self.M_SETRPM is None:
        self.M_SETRPM = [0] * 2
      if self.M_GETRPM is None:
        self.M_GETRPM = [0] * 2
      if self.M_PARAM is None:
        self.M_PARAM = [0] * 2
      if self.M_ALARM is None:
        self.M_ALARM = [0] * 2
      if self.PRECHARGE_FUSE is None:
        self.PRECHARGE_FUSE = 0
      if self.MOTOR_FUSE is None:
        self.MOTOR_FUSE = 0
      if self.LED_STATE is None:
        self.LED_STATE = 0
    else:
      self.LOWBATTERY_FLAG = False
      self.CHARGING_FLAG = False
      self.MOTOR_ALARM_FLAG = False
      self.BMS_ALARM_FLAG = False
      self.HIGH_TEMP_FLAG = False
      self.COMM_ERROR_FLAG = False
      self.BMS_SOC = 0
      self.BMS_SOH = 0
      self.BMS_Voltage = 0
      self.BMS_Current = 0
      self.BMS_voltageDiff = 0
      self.BMS_tempDiff = 0
      self.BMS_BCUMode = 0
      self.BMS_Alarm = 0
      self.M_State = [0] * 2
      self.M_Alarm = [0] * 2
      self.M_Power = [0] * 2
      self.M_Voltage = [0] * 2
      self.M_Current = [0] * 2
      self.M_Comm = b'\0'*2
      self.Relay_Temp = 0.
      self.PowerConn_Temp = 0.
      self.PreCharge_Temp = 0.
      self.Power_Supply_Temp = 0.
      self.Battery_In_Volt = 0.
      self.PRE_CHARGE_Volt = 0.
      self.HW_ESTOP_Volt = 0.
      self.SW_ESTOP_Volt = 0.
      self.Motor_Alarm_Code = [0] * 2
      self.Motor_Fun_Fail = [0] * 2
      self.M_INIT = [0] * 2
      self.M_CW = [0] * 2
      self.M_CCW = [0] * 2
      self.M_STOP = [0] * 2
      self.M_BREAK = [0] * 2
      self.M_SETRPM = [0] * 2
      self.M_GETRPM = [0] * 2
      self.M_PARAM = [0] * 2
      self.M_ALARM = [0] * 2
      self.PRECHARGE_FUSE = 0
      self.MOTOR_FUSE = 0
      self.LED_STATE = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6B3Hh4H().pack(_x.LOWBATTERY_FLAG, _x.CHARGING_FLAG, _x.MOTOR_ALARM_FLAG, _x.BMS_ALARM_FLAG, _x.HIGH_TEMP_FLAG, _x.COMM_ERROR_FLAG, _x.BMS_SOC, _x.BMS_SOH, _x.BMS_Voltage, _x.BMS_Current, _x.BMS_voltageDiff, _x.BMS_tempDiff, _x.BMS_BCUMode, _x.BMS_Alarm))
      buff.write(_get_struct_2H().pack(*self.M_State))
      buff.write(_get_struct_2H().pack(*self.M_Alarm))
      buff.write(_get_struct_2H().pack(*self.M_Power))
      buff.write(_get_struct_2H().pack(*self.M_Voltage))
      buff.write(_get_struct_2H().pack(*self.M_Current))
      _x = self.M_Comm
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
      _x = self
      buff.write(_get_struct_8f().pack(_x.Relay_Temp, _x.PowerConn_Temp, _x.PreCharge_Temp, _x.Power_Supply_Temp, _x.Battery_In_Volt, _x.PRE_CHARGE_Volt, _x.HW_ESTOP_Volt, _x.SW_ESTOP_Volt))
      buff.write(_get_struct_2H().pack(*self.Motor_Alarm_Code))
      buff.write(_get_struct_2I().pack(*self.Motor_Fun_Fail))
      buff.write(_get_struct_2H().pack(*self.M_INIT))
      buff.write(_get_struct_2H().pack(*self.M_CW))
      buff.write(_get_struct_2H().pack(*self.M_CCW))
      buff.write(_get_struct_2H().pack(*self.M_STOP))
      buff.write(_get_struct_2H().pack(*self.M_BREAK))
      buff.write(_get_struct_2H().pack(*self.M_SETRPM))
      buff.write(_get_struct_2H().pack(*self.M_GETRPM))
      buff.write(_get_struct_2H().pack(*self.M_PARAM))
      buff.write(_get_struct_2H().pack(*self.M_ALARM))
      _x = self
      buff.write(_get_struct_3B().pack(_x.PRECHARGE_FUSE, _x.MOTOR_FUSE, _x.LED_STATE))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.LOWBATTERY_FLAG, _x.CHARGING_FLAG, _x.MOTOR_ALARM_FLAG, _x.BMS_ALARM_FLAG, _x.HIGH_TEMP_FLAG, _x.COMM_ERROR_FLAG, _x.BMS_SOC, _x.BMS_SOH, _x.BMS_Voltage, _x.BMS_Current, _x.BMS_voltageDiff, _x.BMS_tempDiff, _x.BMS_BCUMode, _x.BMS_Alarm,) = _get_struct_6B3Hh4H().unpack(str[start:end])
      self.LOWBATTERY_FLAG = bool(self.LOWBATTERY_FLAG)
      self.CHARGING_FLAG = bool(self.CHARGING_FLAG)
      self.MOTOR_ALARM_FLAG = bool(self.MOTOR_ALARM_FLAG)
      self.BMS_ALARM_FLAG = bool(self.BMS_ALARM_FLAG)
      self.HIGH_TEMP_FLAG = bool(self.HIGH_TEMP_FLAG)
      self.COMM_ERROR_FLAG = bool(self.COMM_ERROR_FLAG)
      start = end
      end += 4
      self.M_State = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.M_Alarm = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.M_Power = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.M_Voltage = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.M_Current = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 2
      self.M_Comm = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.Relay_Temp, _x.PowerConn_Temp, _x.PreCharge_Temp, _x.Power_Supply_Temp, _x.Battery_In_Volt, _x.PRE_CHARGE_Volt, _x.HW_ESTOP_Volt, _x.SW_ESTOP_Volt,) = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 4
      self.Motor_Alarm_Code = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 8
      self.Motor_Fun_Fail = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      self.M_INIT = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.M_CW = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.M_CCW = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.M_STOP = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.M_BREAK = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.M_SETRPM = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.M_GETRPM = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.M_PARAM = _get_struct_2H().unpack(str[start:end])
      start = end
      end += 4
      self.M_ALARM = _get_struct_2H().unpack(str[start:end])
      _x = self
      start = end
      end += 3
      (_x.PRECHARGE_FUSE, _x.MOTOR_FUSE, _x.LED_STATE,) = _get_struct_3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6B3Hh4H().pack(_x.LOWBATTERY_FLAG, _x.CHARGING_FLAG, _x.MOTOR_ALARM_FLAG, _x.BMS_ALARM_FLAG, _x.HIGH_TEMP_FLAG, _x.COMM_ERROR_FLAG, _x.BMS_SOC, _x.BMS_SOH, _x.BMS_Voltage, _x.BMS_Current, _x.BMS_voltageDiff, _x.BMS_tempDiff, _x.BMS_BCUMode, _x.BMS_Alarm))
      buff.write(self.M_State.tostring())
      buff.write(self.M_Alarm.tostring())
      buff.write(self.M_Power.tostring())
      buff.write(self.M_Voltage.tostring())
      buff.write(self.M_Current.tostring())
      _x = self.M_Comm
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_get_struct_2B().pack(*_x))
      else:
        buff.write(_get_struct_2s().pack(_x))
      _x = self
      buff.write(_get_struct_8f().pack(_x.Relay_Temp, _x.PowerConn_Temp, _x.PreCharge_Temp, _x.Power_Supply_Temp, _x.Battery_In_Volt, _x.PRE_CHARGE_Volt, _x.HW_ESTOP_Volt, _x.SW_ESTOP_Volt))
      buff.write(self.Motor_Alarm_Code.tostring())
      buff.write(self.Motor_Fun_Fail.tostring())
      buff.write(self.M_INIT.tostring())
      buff.write(self.M_CW.tostring())
      buff.write(self.M_CCW.tostring())
      buff.write(self.M_STOP.tostring())
      buff.write(self.M_BREAK.tostring())
      buff.write(self.M_SETRPM.tostring())
      buff.write(self.M_GETRPM.tostring())
      buff.write(self.M_PARAM.tostring())
      buff.write(self.M_ALARM.tostring())
      _x = self
      buff.write(_get_struct_3B().pack(_x.PRECHARGE_FUSE, _x.MOTOR_FUSE, _x.LED_STATE))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 22
      (_x.LOWBATTERY_FLAG, _x.CHARGING_FLAG, _x.MOTOR_ALARM_FLAG, _x.BMS_ALARM_FLAG, _x.HIGH_TEMP_FLAG, _x.COMM_ERROR_FLAG, _x.BMS_SOC, _x.BMS_SOH, _x.BMS_Voltage, _x.BMS_Current, _x.BMS_voltageDiff, _x.BMS_tempDiff, _x.BMS_BCUMode, _x.BMS_Alarm,) = _get_struct_6B3Hh4H().unpack(str[start:end])
      self.LOWBATTERY_FLAG = bool(self.LOWBATTERY_FLAG)
      self.CHARGING_FLAG = bool(self.CHARGING_FLAG)
      self.MOTOR_ALARM_FLAG = bool(self.MOTOR_ALARM_FLAG)
      self.BMS_ALARM_FLAG = bool(self.BMS_ALARM_FLAG)
      self.HIGH_TEMP_FLAG = bool(self.HIGH_TEMP_FLAG)
      self.COMM_ERROR_FLAG = bool(self.COMM_ERROR_FLAG)
      start = end
      end += 4
      self.M_State = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.M_Alarm = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.M_Power = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.M_Voltage = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.M_Current = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 2
      self.M_Comm = str[start:end]
      _x = self
      start = end
      end += 32
      (_x.Relay_Temp, _x.PowerConn_Temp, _x.PreCharge_Temp, _x.Power_Supply_Temp, _x.Battery_In_Volt, _x.PRE_CHARGE_Volt, _x.HW_ESTOP_Volt, _x.SW_ESTOP_Volt,) = _get_struct_8f().unpack(str[start:end])
      start = end
      end += 4
      self.Motor_Alarm_Code = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 8
      self.Motor_Fun_Fail = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=2)
      start = end
      end += 4
      self.M_INIT = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.M_CW = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.M_CCW = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.M_STOP = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.M_BREAK = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.M_SETRPM = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.M_GETRPM = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.M_PARAM = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      start = end
      end += 4
      self.M_ALARM = numpy.frombuffer(str[start:end], dtype=numpy.uint16, count=2)
      _x = self
      start = end
      end += 3
      (_x.PRECHARGE_FUSE, _x.MOTOR_FUSE, _x.LED_STATE,) = _get_struct_3B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2B = None
def _get_struct_2B():
    global _struct_2B
    if _struct_2B is None:
        _struct_2B = struct.Struct("<2B")
    return _struct_2B
_struct_2H = None
def _get_struct_2H():
    global _struct_2H
    if _struct_2H is None:
        _struct_2H = struct.Struct("<2H")
    return _struct_2H
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
_struct_2s = None
def _get_struct_2s():
    global _struct_2s
    if _struct_2s is None:
        _struct_2s = struct.Struct("<2s")
    return _struct_2s
_struct_3B = None
def _get_struct_3B():
    global _struct_3B
    if _struct_3B is None:
        _struct_3B = struct.Struct("<3B")
    return _struct_3B
_struct_6B3Hh4H = None
def _get_struct_6B3Hh4H():
    global _struct_6B3Hh4H
    if _struct_6B3Hh4H is None:
        _struct_6B3Hh4H = struct.Struct("<6B3Hh4H")
    return _struct_6B3Hh4H
_struct_8f = None
def _get_struct_8f():
    global _struct_8f
    if _struct_8f is None:
        _struct_8f = struct.Struct("<8f")
    return _struct_8f
