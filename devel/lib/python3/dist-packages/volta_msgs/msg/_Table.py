# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from volta_msgs/Table.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class Table(genpy.Message):
  _md5sum = "b849cd8a5229dad6cf68bbda639aeae9"
  _type = "volta_msgs/Table"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """float32 soc
float32 soh
float32 current
float32 voltage
uint8 system_status
float32 relay_temp
float32 powe_in_temp

float32 motor_volt
float32 battery_volt
float32 hw_estop_volt
uint8 motorAlarm
uint8 diag_en
uint8 hw_Estop_state
uint8 sw_Estop_state
uint8 ros_Estop_state
"""
  __slots__ = ['soc','soh','current','voltage','system_status','relay_temp','powe_in_temp','motor_volt','battery_volt','hw_estop_volt','motorAlarm','diag_en','hw_Estop_state','sw_Estop_state','ros_Estop_state']
  _slot_types = ['float32','float32','float32','float32','uint8','float32','float32','float32','float32','float32','uint8','uint8','uint8','uint8','uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       soc,soh,current,voltage,system_status,relay_temp,powe_in_temp,motor_volt,battery_volt,hw_estop_volt,motorAlarm,diag_en,hw_Estop_state,sw_Estop_state,ros_Estop_state

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Table, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.soc is None:
        self.soc = 0.
      if self.soh is None:
        self.soh = 0.
      if self.current is None:
        self.current = 0.
      if self.voltage is None:
        self.voltage = 0.
      if self.system_status is None:
        self.system_status = 0
      if self.relay_temp is None:
        self.relay_temp = 0.
      if self.powe_in_temp is None:
        self.powe_in_temp = 0.
      if self.motor_volt is None:
        self.motor_volt = 0.
      if self.battery_volt is None:
        self.battery_volt = 0.
      if self.hw_estop_volt is None:
        self.hw_estop_volt = 0.
      if self.motorAlarm is None:
        self.motorAlarm = 0
      if self.diag_en is None:
        self.diag_en = 0
      if self.hw_Estop_state is None:
        self.hw_Estop_state = 0
      if self.sw_Estop_state is None:
        self.sw_Estop_state = 0
      if self.ros_Estop_state is None:
        self.ros_Estop_state = 0
    else:
      self.soc = 0.
      self.soh = 0.
      self.current = 0.
      self.voltage = 0.
      self.system_status = 0
      self.relay_temp = 0.
      self.powe_in_temp = 0.
      self.motor_volt = 0.
      self.battery_volt = 0.
      self.hw_estop_volt = 0.
      self.motorAlarm = 0
      self.diag_en = 0
      self.hw_Estop_state = 0
      self.sw_Estop_state = 0
      self.ros_Estop_state = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_4fB5f5B().pack(_x.soc, _x.soh, _x.current, _x.voltage, _x.system_status, _x.relay_temp, _x.powe_in_temp, _x.motor_volt, _x.battery_volt, _x.hw_estop_volt, _x.motorAlarm, _x.diag_en, _x.hw_Estop_state, _x.sw_Estop_state, _x.ros_Estop_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 42
      (_x.soc, _x.soh, _x.current, _x.voltage, _x.system_status, _x.relay_temp, _x.powe_in_temp, _x.motor_volt, _x.battery_volt, _x.hw_estop_volt, _x.motorAlarm, _x.diag_en, _x.hw_Estop_state, _x.sw_Estop_state, _x.ros_Estop_state,) = _get_struct_4fB5f5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_4fB5f5B().pack(_x.soc, _x.soh, _x.current, _x.voltage, _x.system_status, _x.relay_temp, _x.powe_in_temp, _x.motor_volt, _x.battery_volt, _x.hw_estop_volt, _x.motorAlarm, _x.diag_en, _x.hw_Estop_state, _x.sw_Estop_state, _x.ros_Estop_state))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 42
      (_x.soc, _x.soh, _x.current, _x.voltage, _x.system_status, _x.relay_temp, _x.powe_in_temp, _x.motor_volt, _x.battery_volt, _x.hw_estop_volt, _x.motorAlarm, _x.diag_en, _x.hw_Estop_state, _x.sw_Estop_state, _x.ros_Estop_state,) = _get_struct_4fB5f5B().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_4fB5f5B = None
def _get_struct_4fB5f5B():
    global _struct_4fB5f5B
    if _struct_4fB5f5B is None:
        _struct_4fB5f5B = struct.Struct("<4fB5f5B")
    return _struct_4fB5f5B
